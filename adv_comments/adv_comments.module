<?php

/**
 * Implementation of hook_menu().
 */
function adv_comments_menu() {
  $items = array();

  $items['admin/config/user-interface/adv_comments'] = array(
    'title' => '高级评论管理配置',
    'description' => '高级评论管理配置.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('adv_comments_settings'),
    'access arguments' => array('administer_comments'),
    'file' => 'adv_comments.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/comments/filter'] = array(
    'title' => '高级评论管理',
    'description' => 'All-in-one advanced filter and management of your site content.',
    'page callback' => 'adv_comments_content_page',
    'page arguments' => '',  
    'access arguments' => array('use_administer_comments'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
  );

  $items['acf/userauto'] = array(
    'title' => 'User autocomplete',
    'page callback' => '_acf_user_autocomplete',
    'access callback' => 'user_access',
    'access arguments' => array('use_administer_comments'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu callback; Retrieve a JSON object containing autocomplete suggestions for existing users.
 */
function _acf_user_autocomplete($string = '') {
  $matches = array();
  if ($string) {
     $result = db_select('{users}', 'u');
     $result->condition('u.name', '%'.db_like($string).'%', 'like');
     $result->addField('u', 'name');
    $result = $result->execute();
    while ($account = $result->fetchObject()) {
      $matches[$account->name] = check_plain($account->name);
    }
  }
  drupal_json_output($matches);
}

/**
 * Implementation of hook_perm().
 */
function adv_comments_permission() {
  return array(
    // TODO : simplify machine name and update existing perms ?
    'administer_comments' => array(
      'title' => t('管理高级评论'),
      'description' => t('管理高级评论'),
    ),
    'use_administer_comments' => array(
      'title' => t('使用高级评论'),
      'description' => t('使用高级评论'),
    ),
    'ope_administer_comments' => array(
      'title' => t('操作高级评论'),
      'description' => t('操作高级评论'),
    ),

  );
}


/**
 * Implementation of hook_theme().
 *
 * @ingroup themable
 */
function adv_comments_theme() {
  return array(
    'adv_comments_filter_form' => array(
        'render element' => 'form',
      ),
    'acf_admin_comments_form' => array(
        'render element' => 'form',
        'file' => 'adv_comments.inc',
      ),
    'acf_user' => array(
        'variables' => array('uid' => NULL),
      ),
    'acf_good_comments' => array(
        'variables' => array('cid' => NULL),
      ),    
  );
}


/**
 * Theme user cell on table result.
 *
 * @ingroup themable
 *
 * @param user ID
 * @return clickable username with status
 */
function theme_acf_user($variables) {
  $uid = $variables['uid'];
  if ($uid == 0 || !isset($uid)) {
    return variable_get('anonymous', t('anonymous'));
  }
  $result = db_query('SELECT name, status FROM {users} WHERE uid = :d', array(':d'=>$uid));
  $user = $result->fetchAssoc();
  $url_alias = _cmf_get_user_path($uid);

  $display = $user['status'] ? $user['name'] : _cmf_get_img('blocked', t('blocked')) .' '. $user['name'];
  if (user_access('access user profiles')) {
    //$url = $url_alias ? $url_alias : 'user/'. $uid;
    //$output = l($display, $url, array('html' => TRUE));
    $output = $user['name'];
  }
  else {
    $output = $display;
  }
  return $output;
}

function theme_acf_good_comments($variables){
  $cid = $variables['cid'];
  $comment_load = comment_load($cid);
  $good_comment_arr = field_get_items('comment', $comment_load, 'field_good_comment');
  return (isset($good_comment_arr[0]['value']) && $good_comment_arr[0]['value']) ? '是' : '否';
}

/**
 * Build the header of the result table.
 *
 * @param $user_page_user
 *    if we are on a user page, the user that page belongs to, not the current user
 *
 * @return array respecting tablesort_sql()
 */
function acf_build_header($user_page_user = NULL) {
  $header[] = array('data' => t('评论内容'), 'field' => 'subject');
  $header[] = array('data' => t('文章标题'));
  $header[] = array('data' => t('所属栏目'), 'field' => 'type');
  $header[] = array('data' => t('状态'), 'field' => 'status');
  $header[] = array('data' => t('评论人'), 'field' => 'username');
  $header[] = array('data' => t('评论时间'), 'field' => 'created', 'sort' => 'desc');
  $header[] = array('data' => t('精彩评论'));
     
  if (user_access('ope_administer_comments')) {
    $header[] = array('data' => t('操作'));
  }

  //add table select all
  drupal_add_js('misc/tableselect.js');
  array_unshift($header, array('class' => array('select-all')));
  return $header;
}


/**
 *  QUERIES
 */
/**
 * Build the variable parts of the query to be performed regarding the filter status.
 *
 * @return associative array with WHERE JOIN query parts and respective arguments
 */
function acf_build_filter_query() { 
  //获取查询条件的结构，包括，每个条件的查询条件，和验证函数的定义  
  $filters = acf_filters();

  // Build query
  $where = $args = array();
  $join = '';

  foreach ($_SESSION['acf_overview_filter'] as $index => $filter) { 
    list($key, $value) = $filter;
    // Does the filter have query_build function?
    if (isset($filters[$key]['query_build'])) {
      $result = call_user_func($filters[$key]['query_build'], $key, $value, $index);
      if (isset($result['where'])) {
        $where[] = $result['where'];
      }
      if (isset($result['join'])) {
        $join .= $result['join'] .' ';
      }
      if (isset($result['value'])) {
        $value = $result['value'];
      }
    } else if(isset($filters[$key]['query_type_or'])){
      $result = call_user_func($filters[$key]['query_type_or'], $key, $value, $index);
      if (isset($result['where'])) {
        $where[] = $result['where'];
      }
      if (isset($result['value'])) {
        $value = $result['value'];
      }
    }
    else {
      // Does the filter have where and/or joins specified?
      if (isset($filters[$key]['where'])) {
        $where[] = $filters[$key]['where'];
      }
      if (isset($filters[$key]['join'])) {
        $join .= $filters[$key]['join'] .' ';
      }
    }
    //$tags = is_array($value) ? key($value) : $filters[$key]['tags']; 
    if($filters[$key]['tags']=='d'){
        $value = (int)$value;
    }else if($filters[$key]['tags']=='s'){
        $value = (string)$value;
    }else if($filters[$key]['tags']=='like'){
        $value = (string)"%".$value."%";
    }
    if(is_array($value)){
      foreach ($value as $key => $v) {
        $args[] = $v;
      }
    }else{
      $args[] = $value;
    }
    
  } 
  $where = count($where) ? 'WHERE '. implode(' AND ', $where) : ''; 
  return array('where' => $where, 'join' => $join, 'args' => $args);
}

/**
 * Perform adjusted query.
 * 
 * @param $user_page_user
 *    if we are on a user page, the user that page belongs to, not the current user
 *
 *
 * @param array respecting tablesort_sql()
 * @return result of permormed query
 */
function acf_perform_query($header) {
  //获取参数 where join args   
  $filter = acf_build_filter_query();
  $where = ' '. $filter['where'];
  //添加自定义where条件
  //如果查询的内容为空，或者没有选择内容类型作为过滤条件，则制定某些内容类型进行过滤
  if($where==' ' || !_acf_check_have_type_for_filter(array('type','type_one'))){ 
    $content_type = _get_acf_access_content_type();
    $content_type = _acf_return_true_content_type($content_type);
    $condition = _acf_generation_where_value($content_type);
    if($where==' '){
      $where = 'where '.$condition['where'];
      $filter['args'] = array_keys($condition['value']); 
    }else{
      $where = $where.' AND '.$condition['where'];
      $filter['args'] = array_merge($filter['args'],array_keys($condition['value'])); 
    }
  }  

  $cwhere = str_replace(array('n.title', 'n.uid', 'r.body'), array('c.subject', 'c.uid', 'c.comment'), $where);
  $query = "SELECT g.field_good_comment_value AS good_comment , c.cid, c.subject,cb.comment_body_value AS comment, c.nid, c.created, "
    ."c.status, c.name, c.homepage, u.name AS username, u.uid, n.type, cb.comment_body_value AS body "
    ."FROM {comment} c "
    ."INNER JOIN {node} n ON c.nid = n.nid "
    ."INNER JOIN {users} u ON u.uid = c.uid "
    ."LEFT JOIN {field_data_comment_body} cb ON c.cid = cb.entity_id " 
    ."LEFT JOIN {field_data_field_good_comment} g ON g.entity_id = c.nid " 
    . $filter['join']
    . $cwhere
    . tablesort_sql($header);
    $limit = isset($_SESSION['cmf_max_rows']) ? $_SESSION['cmf_max_rows'] : 50;
    $page = pager_default_initialize(count(db_query($query,$filter['args'])->fetchAll()), $limit);
    $offset = $limit * $page;
    $result = db_query_range($query, $offset, $limit, $filter['args']);
  return $result;
}

/**
 *  RESULTS
 */
module_load_include('inc', 'adv_comments', '/adv_comments');
module_load_include('inc', 'cmf', '/wjc.page');

/**
 * Theme cmf administration filter form.
 *
 * @themable
 */
function theme_adv_comments_filter_form($form) {   
  return '<div id="cmf_header">'. drupal_render($form['form']['general']) .'</div><div id="headerafter"></div>'
    .'<div id="main-filters"><div id="node-admin-filter-filter">'.render($form['form']['filters']['filter']) .'</div>'
    .'<div id="node-admin-filter-status">'.render($form['form']['filters']['status']) .'</div></div>'      
    .'<div id="node-admin-filter-result">'.drupal_render_children($form['form']).'</div><div class="clearfix"></div>'; 
}

/**
 * Called when user goes to example.com/admin/content/filter
 *
 * @return the HTML generated from the $form data structure
 */
function adv_comments_content_page($user = NULL) { 
  drupal_set_title('评论管理'); 
  $output = '';
  $cff = drupal_get_form('adv_comments_filter_form', $user); 
  $output = drupal_render($cff); 
  // Call the form first, to allow for the form_val es array to be populated.
  if (isset($_POST['operation']) && $_POST['operation'] == 'delete' && $_POST['comments']) {
    // The next line is because of http://drupal.org/node/521354.
    module_load_include('inc', 'comment', 'comment.admin');
    return drupal_get_form('comment_multiple_delete_confirm',$_POST['nodes']);
  }
  else { 
    $commf = drupal_get_form('acf_admin_comments_form',null); 
    // wjcPrint($commf);
    $output .= drupal_render($commf);
  }
  drupal_add_js(drupal_get_path('module', 'cmf').'/wjc.page.js'); 
  return $output.'<input type="hidden" id="basepath" value="'.base_path().'">';
}


/**
 * List node administration filters that can be applied.
 *
 * @param $user 
 *  (object) if a user profile page then user object (defaults to false).
 *
 * @return array with filter properties.
 *   Any property starting with '#' goes directly into the filter form.
 *   '#options' is also used in function cmf_filter_form_submit.
 *   'title' is the text that will show on the filter form.
 *   'single_use' (bool) determines if the filter will be disabled if it is already in use.
 *   'whole_value'  "before" if the value is complete and shown before "is",
 *      "after" if the value is complete and shown after "is",
 *      "no" if it is a portion ("contains"), such as a substring.
 *   'disable' is a list of other filters to remove if this one is selected.
 *   'where' sets a simple WHERE clause for the query (with substitution).
 *   'join' sets a simple JOIN clause for the query (with substitution).
 *   'query_build' provides a funtion for more complex query clauses.
 *   If validation and/or submission handling is needed, use the #element_validate and #submit elements.
 *   Submit handlers must set the return value in $form_state['values'] array.
 *
 *  NOTE: for the 'where' clause some node fields are translated to comment-equivalent
 *   field names if appropriate. See function cmf_perform_query for 'comment' and 'both.'
 */
function acf_filters($user = FALSE) { //unset($_SESSION['acf_overview_filter']);
  // Make the array static so it is built only once per page load.
  static $filters;
  if (isset($filters)) {
    return $filters;
  }

  $filters = array();
  // Regular filters.
  $filters['status'] = array(
    'title' => t('状态'),
    'tags' => '',  
    'single_use' => FALSE,
    'whole_value' => 'before',
    'query_build' => '_acf_status_query_build',
    '#type' => 'select',
    '#options' => array(
      'status-1' => t('published'),
      'status-0' => t('not published'),
      ),
    );
  //一级栏目
  // $roles = array_keys($GLOBALS['user']->roles);
  // if(in_array(43, $roles) || in_array(4, $roles)){
  //   $first_column = taxonomy_get_tree(2,0,1);
  //   $type_one = array();
  //     if(count($first_column)>0){
  //       foreach($first_column as $k=>$v){
  //         $type_one[$v->tid] = $v->name;
  //       }
  //     }
  //   $filters['type_one'] = array(
  //     'title' => t('一级栏目'),
  //     'single_use' => true,
  //     'query_type_or' => '_cmf_type_in_build',
  //     'whole_value' => 'before',
  //     'where' => "n.type in ?",
  //     'tags' => '',  
  //     'disable' => array('type'),
  //     '#type' => 'select',
  //     '#options' => $type_one,
  //   );
  // }

  //二级栏目
  //获取当前用户能操作的内容类型
  $content_type = _get_acf_access_content_type();
  $content_type = _acf_return_true_content_type($content_type);
  $filters['type'] = array(
    'title' => t('栏目'),
    'single_use' => true,
    'whole_value' => 'before',
    'where' => "n.type = ?",
    'tags' => 's',  
    'disable' => array('type_one'),
    '#type' => 'select',
    '#options' => array_filter($content_type),
  );

  $filters['body_contains'] = array(
    'title' => t('评论内容'),
    'single_use' => FALSE,
    'whole_value' => 'no',
    'where' => "cb.comment_body_value LIKE ?",
    'tags' => 'like',    
    '#type' => 'textfield',
    '#element_validate' => array('_acf_contains_validate'),
    );

  $filters['created_after'] = array(
    'title' => t('该时间之后'),
    'single_use' => TRUE,
    'whole_value' => 'after',
    'where' => "c.created >= ?",
    'tags' => 'd',    
    '#type' => 'date',
    '#element_validate' => array('date_validate', '_acf_date_validate'),
    '#submit' => array('acf_date_handler'),
    '#default_value' => array('year' => date('Y'), 'month' => 1, 'day' => 1),
    '#prefix' => '<div class="date-inline">',
    '#suffix' => '</div>',
    );

  $filters['created_before'] = array(
    'title' => t('该时间之前'),
    'single_use' => TRUE,
    'whole_value' => 'after',
    'where' => "c.created <= ?",
    'tags' => 'd',    
    '#type' => 'date',
    '#element_validate' => array('date_validate', '_acf_date_validate'),
    '#submit' => array('acf_date_handler'),
    '#default_value' => array('year' => date('Y'), 'month' => 12, 'day' => 31),
    '#prefix' => '<div class="date-inline">',
    '#suffix' => '</div>',
    );

  $filters['users'] = array(
    'title' => t('评论人'),
    'single_use' => TRUE,
    'whole_value' => 'before',
    'disable' => array('user', 'role', 'blocked'),
    'where' => "u.name = ?",
    'tags' => 's',    
    '#type' => 'textfield',
    '#submit' => array('acf_users_handler'),
    '#autocomplete_path' => 'cmf/userauto',
    );

  // The taxonomy filter.
  // if (module_exists('taxonomy')) {
  //   $filters['category'] = array(
  //     'title' => t('类别'),
  //     'single_use' => TRUE,
  //     'tags' => 'd',  
  //     'whole_value' => 'before',
  //     'query_build' => '_acf_category_query_build',
  //     '#type' => 'select',
  //     '#attributes' =>array('lang'=>'selectt_1'),
  //     '#options' => getTaxOne(),
  //     '#prefix' => '<div id="taxdiv" style="position:relative;">',
  //     '#suffix' => '</div>'  
  //     );
    
  //   $filters['categoryhide'] = array(
  //       'title' => t('categoryhide'),
  //       '#type' => 'hidden',
  //       '#attributes' =>array('id'=>'categoryhide'),
  //       '#default_value' => -1,
  //       '#prefix' => '<div id="categoryhd">',
  //       '#suffix' => '</div>'
  //   );
  // }
  //drupal_alter('acf_filters', $filters);
  return $filters;
}


/**
 * Query_build function for status field.
 */
function _acf_status_query_build($key, $value, $index) {
  // Note: no exploitable hole as $key/$value have already been checked when submitted.
  list($key, $value) = explode('-', $value, 2);
  if ($key == 'sticky') {
    // This allows sticky-encoded weighting (like Weight module) to also work.
    return array(
      'where' => "c.". $key .' '. ($value == 1 ? '>' : '<') ." ?",
//      'value' => array('%d' => $value),
        'value' => $value,
      );
  }
  else {
    return array(
      'where' => "c.". $key ." = ?",
//      'value' => array('%d' => $value),
        'value' => $value,
      );
  }
}

/**
 * FILTERS
 */
/**
 * Defines the form for content administration filters.
 *
 * @ingroup forms
 *
 * @param (optional) true if the filter to be built serves the user profile page
 * @return array with forms properties
 */
function adv_comments_filter_form($form, &$form_state) {  
  //调用提示信息  
  $session = &$_SESSION['acf_overview_filter'];
  $session = is_array($session) ? $session : array();
  $filters = acf_filters();
  drupal_add_css(drupal_get_path('module', 'adv_comments') .'/adv_comments.css');
  
  // General settings display (max rows & content kind).
  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('基本设置'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    );

  $form['general']['max-rows'] = array(
    '#type' => 'textfield',
    '#title' => t('每页显示条数'),
    '#size' => 5,
    '#default_value' => isset($_SESSION['acf_max_rows']) ? $_SESSION['acf_max_rows'] : 50,
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
    );

  $form['general']['buttons']['apply'] = array(
    '#type' => 'submit',
    '#value' => t('设置'),
    '#submit' => array('acf_filter_form_apply'),
    '#suffix' => '</div>',
    );
// return $form;
  $i = 0;
  $form['filters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Show only items where'),
//    '#theme' => 'node_filters',
    ); 
 
  
  //add notice  info
  foreach ($session as $filter) { 
    list($type, $value) = $filter;
    // Special handling by type of filter.
    switch ($type) {
      case 'category':
        // Load term name from DB rather than search and parse options array.
        $value = taxonomy_term_load($value);
        $value = isset($value->name) ? $value->name : '';
        break;

      case 'body_contains':
      case 'title':
        // Add quotes.
        $value = "'". $value ."'";
        break;

      case 'created_after':
      case 'created_before':
        // Format as human date.
        $fmt = variable_get('date_format_short', variable_get('date_format_short_custom', 'Y M j'));
        $fmt = trim(str_replace(array('H', 'i', ':'), '', $fmt));
        $value = format_date($value, 'custom', $fmt);
        break;

      default:
        if (isset($filters[$type]['#options'])) {
          $value = $filters[$type]['#options'][$value];
        }
    }

    // Add applicable filter verbiage. Note '@' and '%' do check_plain.
    $trans_strings = array(
      '%filter_name' => $filters[$type]['title'],
      '%filter_value' => $value,
      );
    if ($i++) {
      $and = '<br><em>'. t('并且') .'</em> ';
    }
    else {
      $and = NULL;
    }
    
    //after  before 是指的is 是在前还是在后
    switch ($filters[$type]['whole_value']) {
      case 'after':
        $form['filters']['current'][] = array('#type'=>'markup', '#markup' => $and . t('是 %filter_name %filter_value', $trans_strings));
        break;

      case 'before':
        $form['filters']['current'][] = array('#type'=>'markup', '#markup' => $and . t('%filter_name 等于 %filter_value', $trans_strings));
        break;

      case 'no':
        $form['filters']['current'][] = array('#type'=>'markup', '#markup' => $and . t('%filter_name 包含 %filter_value', $trans_strings));
        break;
    }

    // Remove mutually exclusive filters.
    if (isset($filters[$type]['disable'])) {
      foreach ($filters[$type]['disable'] as $exclude) {
        unset($filters[$exclude]);
      }
    }

    // Remove the single use option if it is already being filtered on.
    if ($type == 'status') {
//      drupal_set_message('okay, what do I get rid of? '. print_r($filter,true));
//      dsm(print_r($filters['status'],true));
      // Strip current value, then unset both values.
      $status = drupal_substr($filter[1], 0, -1);
      unset ($filters['status']['#options'][$status.'0'], $filters['status']['#options'][$status.'1']);
    }

    //如果已经被查询了，那么就删除
    if (isset($filters[$type]['single_use'])) {
      unset($filters[$type]);
    }
  }

  // Prepare form fields for filters.
  foreach ($filters as $key => $filter) {
     if($filter['#type']!='hidden'){  
        $names[$key] = $filter['title'];
     }  
        // Normal form field handling.
        $form['filters']['status'][$key] = array();
        foreach ($filter as $element => $value) { 
          // If the filter element name begins with '#' then it is for the form.
          if (drupal_substr($element, 0, 1) == '#') {  
            $form['filters']['status'][$key][$element] = $value;
          }
      }  
  }

  // Building radio buttons.
  $keyz = array_keys($names); 
  $form['filters']['filter'] = array(
    '#type'          => 'radios',
    '#options'       => $names,
    '#default_value' => $keyz[0],
    '#attributes' => array('class' => array('multiselect')),
    );

  // Building buttons depending on the filter state.
  $form['filters']['buttons']['submit'] = array(
    '#type'  => 'submit',
    '#value' => (count($session) ? t('Refine') : t('Filter')),
    '#submit' => array('acf_filter_form_refine'),
    );

  if (count($session)) {
    $form['filters']['buttons']['undo'] = array(
      '#type' => 'submit',
      '#submit' => array('acf_filter_form_undo'),
      '#value' => t('Undo'),
    );
    $form['filters']['buttons']['reset'] = array(
      '#type' => 'submit',
      '#submit' => array('acf_filter_form_reset'),
      '#value' => t('Reset'),
    );
  }  
  return $form;
}

/**
 * Handle post-validation form submission.
 *
 * @ingroup forms
 *
 * @param the ID of the passed form
 * @param array with the form properties values
 */
function acf_filter_form_refine($form, &$form_state) {
  $filters = acf_filters();
  if (isset($form_state['values']['filter'])) {
    $filter = $form_state['values']['filter'];
    // Convert AJAX search value to select box value.

    // If a filter has specified a submit function, call it. (Only allow one value.)
    if (isset($filters[$filter]['#submit'])) {
      $form_state['values'][$filter] = call_user_func($filters[$filter]['#submit'][0], $form, $form_state);
    }
    // Repeating this allows submit handlers (e.g. users) to alter the filter name.
    $filter = $form_state['values']['filter'];

    // Flatten the options array to accommodate hierarchical/nested options.
    // If there are no options, fake it.
    if (isset($filters[$filter]['#options'])) {
      $flat_options = form_options_flatten($filters[$filter]['#options']);
    }
    else {
      $flat_options = array($form_state['values'][$filter] => 1);
    }
    // If the option is selected or there are no options, set the session value.
    if (isset($flat_options[$form_state['values'][$filter]])) {
      //如果为过滤条件那么选取隐藏值做为查询值

      if($filter=='category'){
        $_SESSION['acf_overview_filter'][] = array($filter, $form_state['values']['categoryhide']);
      }else{
        $_SESSION['acf_overview_filter'][] = array($filter, $form_state['values'][$filter]);
      }
    } 
  }
}

/**
 * Submit handler for 'Undo' button.
 */
function acf_filter_form_undo($form, &$form_state) {
  array_pop($_SESSION['acf_overview_filter']);
}

/**
 * Submit handler for 'Reset' button.
 */
function acf_filter_form_reset($form, &$form_state) {
  $_SESSION['acf_overview_filter'] = array();
}

/**
 * Submit handler for 'Apply' button.
 */
function acf_filter_form_apply($form, &$form_state) {
  $_SESSION['acf_max_rows'] = $form_state['values']['max-rows'];
  $form_state['redirect'] = 'admin/comments/filter';
}

//-----------------------------------------------------//

/**
 * hook_form_form_id_alter
 */
function adv_comments_form_alter(&$form, &$form_state, $form_id){
  if($form_id=='acf_admin_comments_form'){
    $form['options']['operation']['#options']['good_comment']='精彩评论（推荐）';
    $form['options']['operation']['#options']['not_good_comment']='精彩评论（撤销）';
    $form['#submit'][] = '_comment_admin_overview_submit';
  }
}			

function _comment_admin_overview_submit($form, &$form_state){
  $operation = $form_state['values']['operation'];
  $cids = $form_state['values']['comments'];
  if($operation=='good_comment'){
    foreach ($cids as $cid => $value) {
      $com = entity_metadata_wrapper('comment',$value);
      if (isset($com->field_good_comment) && !$com->field_good_comment->value()) {
         $com->field_good_comment->set(1);
         $com->save(true);
         $c = comment_load($value);
         _addpoint_good_comment($c->uid,$c->subject);
      }
    }
  }else if($operation=='not_good_comment'){
    foreach ($cids as $cid => $value) {
      $com = entity_metadata_wrapper('comment',$value); 
      if (isset($com->field_good_comment)) {
         $com->field_good_comment->set(0);
         $com->save(true);
      }
    }
  }
  $form_state['redirect'] = 'admin/comments/filter';
  drupal_set_message('操作已经执行');
}


//根据当前用户判断该用户可以查看哪些内容类型的数据
function _get_acf_access_content_type(){
  $content_type = variable_get('adv_comments_cc_settings');
  //或略内容访问权限
  if (user_access('bypass node access')) {
    return $content_type;
  }

  //查找比较
  $accessarr = array();
  foreach ($content_type as $type) {
    if (node_hook($type, 'form') && node_access('create', $type)) {
      $accessarr[$type] = $type;
    }
  }
  return $accessarr;
} 


function _acf_return_true_content_type($cc){
  $ccarr = array();
  foreach ($cc as $key => $value) {
    if($value){
      $name = db_query('select name from {node_type} where type = :type',array(':type'=>$value))->fetchField();
      $ccarr[$key] = $name;
    }
  }
  return $ccarr;
}

/**
 * Validation handler for filter doing "contains".
 */
function _acf_contains_validate($form) {
  // Make sure this was triggered by the selected filter.
  if ($form['#name'] == @$form['#post']['filter']) {
    // Strip blanks to see if the field is empty.
    $value = trim($form['#value']);
    if (empty($value)) {
      form_error($form, t('%name text value may not be empty.', array('%name' => $form['#name'])));
    }
  }
}

/**
 * Validation handler for filter doing "dates".
 */
function _acf_date_validate($form) {  
  // Make sure this was triggered by the selected filter.
  if ($form['#name'] != @$form['#post']['filter']) {
    return;
  }

  // Determine correct time values depending on the filter name.
  if (strpos($form['#name'], 'before') === FALSE) {
    $entered_date = mktime(0, 0, 0, (int)$form['#value']['month'], (int)$form['#value']['day'], (int)$form['#value']['year'], 1);
  }
  else {
    $entered_date = mktime(11, 59, 59, (int)$form['#value']['month'], (int)$form['#value']['day'], (int)$form['#value']['year'], 1);
  }

// drupal_set_message('_acf_date_validate, filter='.$form['#post']['filter'].', name='.$form['#name'].' '.print_r($form['#value'], true).', calc='.format_date($entered_date));
// drupal_set_message('current filters='.print_r($_SESSION['cmf_overview_filter'], true));

  if (empty($entered_date)) {
    form_error($form, t('%name date value may not be empty.', array('%name' => $form['#name'])));
  }
}

/**
 * Submit handler for 'users' filter.
 * Ignore the Coder flag - it is a false positive.
 */
function acf_users_handler($form, &$form_state) {
  $name = $form_state['values']['users']; 
  // Get uid to put in 'user' filter value.
  $form_state['values']['user'] = db_query('SELECT uid FROM {users} WHERE name = ?', array($name))->fetchField();
  // Switch filter type to user.
  $form_state['values']['filter'] = 'user';
  return $name;
}

/**
 * Submit handler for date filters.
 * Ignore the Coder flag - it is a false positive.
 */
function acf_date_handler($form, &$form_state) {
  $filter = $form_state['values']['filter'];
  return gmmktime(0, 0, 0, $form_state['values'][$filter]['month'], $form_state['values'][$filter]['day'], $form_state['values'][$filter]['year']);
}

/**
 * Query_build function for category field.
 */
function _acf_category_query_build($key, $value, $index) {
  $table = "tn$index";
  return array(
    'where' => "$table.tid = ?",
    'join' => "INNER JOIN {taxonomy_index} $table ON n.nid = $table.nid ",
//    'value' => array('%d' => $value),
    'value' => $value,  
    );
}

function _acf_generation_where_value($typearr){
  $where = array();
  foreach ($typearr as $key => $value) {
    $where[]='n.type = ?';
  }
  return array(
    'where' => "(".implode(' or ', $where).")",
    'value' => $typearr,  
    );
}

/**
 * 判断是否加上自定义条件
 */
function _acf_check_have_type_for_filter($type=array()){
  if(isset($_SESSION['acf_overview_filter']) && !empty($_SESSION['acf_overview_filter'])){
    foreach ($_SESSION['acf_overview_filter'] as $key => $value) {
      if(in_array($value[0],$type)){
        return true;
      }
    }
    return false;
  }else{
    return false;
  } 
}

function _get_node_title($nid){
  $title = db_query('select title from {node} where nid=:nid',array(':nid'=>$nid))->fetchField();
  return $title;
}


/**
 * 为精彩评论加分
 */
function _unpublish_comment($uid,$cid,$subject){
  $point = variable_get('user_unpublish_comment_points',-10);
  $params = array (
    'uid' => $uid,
    'description' => t('评论被删除'),
    'display' => false,
    'moderate' => NULL,
    'operation' => 'Insert',
    'tid' => 695, //先下：669
    'points' => $point,
    'entity_id' => $cid,
    'entity_type' => 'comment',
  );
  userpoints_userpointsapi($params);
  privatemsg_new_thread(array(user_load($uid)), '系统消息', '您的评论['.$subject.'],已被管理员删除，扣除您'.abs($point).'个积分！',array('author'=>user_load(1)));
}