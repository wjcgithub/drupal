<?php
/**
 *  include files
 */
module_load_include('inc', 'cmf_heart_bottom_link', '/cmf_heart_bottom_link');
/**
 * Implementation of hook_help().
 */
function cmf_heart_bottom_link_help($path, $arg) {
  switch ($path) {
    case "admin/help#cmf_heart_bottom_link":
      return '<p>'. t('This module adds an easier way for administrators to filter the content on a Drupal site for administration purposes.') .'</p>'
        .'<p>'. t('It is an improvement over the content page in the administration area of Drupal. It can show on the same page nodes and comments and adds new filters like role and author.') .'</p>';
  }
}

/**
 * Implementation of hook_perm().
 */
function cmf_heart_bottom_link_permission() {
  return array(
    // TODO : simplify machine name and update existing perms ?
    'filter and manage site cmf_heart_bottom_link content' => array(
      'title' => t('底部链接内容管理'),
      'description' => t('底部链接内容管理'),
    ),

    'administer_cmf_heart_bottom_link' => array(
      'title' => t('administer cmf_heart_bottom_link seetings'),
      'description' => t('administer cmf_heart_bottom_link seetings'),
    ),

    'use_cmf_heart_bottom_link_operation' => array(
      'title' => t('使用高级底部链接内容管理操作（发布，不发布，排序等）'),
      'description' => t('使用高级底部链接内容管理操作（发布，不发布，排序等）'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function cmf_heart_bottom_link_menu() {
  $items = array();

  $items['admin/config/user-interface/cmf_base/cmf_heart_bottom_link'] = array(
    'title' => '底部链接内容管理配置',
    'description' => '底部链接内容管理配置.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cmf_heart_bottom_link_settings'),
    'access arguments' => array('administer_cmf_heart_bottom_link'),
    'file' => 'cmf_heart_bottom_link.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/content/filter/cmf_hbl'] = array(
    'title' => '底部链接内容管理',
    'description' => 'All-in-one advanced filter and management of your site content.',
    'page callback' => 'cmf_heart_bottom_link_admin_content_page',
    'page arguments' => '',  
    'access arguments' => array('filter and manage site cmf_heart_bottom_link content'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Check user permissions to see menu item under example.com/user/UID/cmf_heart_bottom_link
 *
 * @param access strings
 * @param access strings
 * @return boolean
 */
function _cmf_heart_bottom_link_userspace_perms($manage_access, $view_access) {
  return (user_access($manage_access) || user_access($view_access));
}

/**
 * List node administration filters that can be applied.
 * @return array with filter properties.
 *   Any property starting with '#' goes directly into the filter form.
 *   '#options' is also used in function cmf_heart_bottom_link_filter_form_submit.
 *   'title' is the text that will show on the filter form.
 *   'single_use' (bool) determines if the filter will be disabled if it is already in use.
 *   'whole_value'  "before" if the value is complete and shown before "is",
 *      "after" if the value is complete and shown after "is",
 *      "no" if it is a portion ("contains"), such as a substring.
 *   'disable' is a list of other filters to remove if this one is selected.
 *   'where' sets a simple WHERE clause for the query (with substitution).
 *   'join' sets a simple JOIN clause for the query (with substitution).
 *   'query_build' provides a funtion for more complex query clauses.
 *   If validation and/or submission handling is needed, use the #element_validate and #submit elements.
 *   Submit handlers must set the return value in $form_state['values'] array.
 *
 *  NOTE: for the 'where' clause some node fields are translated to comment-equivalent
 *   field names if appropriate. See function cmf_heart_bottom_link_perform_query for 'comment' and 'both.'
 */
function cmf_heart_bottom_link_filters() { //unset($_SESSION['cmf_heart_bottom_link_overview_filter']);
  // Make the array static so it is built only once per page load.
  static $filters;
  if (isset($filters)) {
    return $filters;
  }

  $filters = array();
  // $filters['status'] = array(
  //   'title' => t('状态'),
  //   'tags' => '',  
  //   'single_use' => FALSE,
  //   'whole_value' => 'before',
  //   'query_build' => '_cmf_heart_bottom_link_status_query_build',
  //   '#type' => 'select',
  //   '#options' => array(
  //     'status-1' => t('published'),
  //     'status-0' => t('not published'),
  //     // 'promote-1' => t('promoted'),
  //     // 'promote-0' => t('not promoted'),
  //     // 'sticky-1'   => t('sticky'),
  //     // 'sticky-0' => t('not sticky'),
  //     ),
  //   );

  //二级栏目
  //获取当前用户能操作的内容类型
  $content_type = _cmf_heart_bottom_link_get_access_content_type();
  $content_type = _return_true_content_type($content_type);
  if(count($content_type)>1){
    $filters['type'] = array(
      'title' => t('栏目'),
      'single_use' => true,
      'whole_value' => 'before',
      'where' => "n.type = ?",
      'tags' => 's',  
      'disable' => array('type_one'),
      '#type' => 'select',
      '#options' => $content_type,
    );
  }

  // Cmf filters.
  $filters['title'] = array(
    'title' => t('标题'),
    'single_use' => FALSE,
    'whole_value' => 'no',
    'where' => "n.title LIKE ?",
    'tags' => 'like',    
    '#type' => 'textfield',
    '#element_validate' => array('_cmf_heart_bottom_link_contains_validate'),
    );

  // $filters['body_contains'] = array(
  //   'title' => t('内容'),
  //   'single_use' => FALSE,
  //   'whole_value' => 'no',
  //   'where' => "r.body_value LIKE ?",
  //   'tags' => 'like',    
  //   '#type' => 'textfield',
  //   '#element_validate' => array('_cmf_heart_bottom_link_contains_validate'),
  // );

  // $filters['created_after'] = array(
  //   'title' => t('该时间之后'),
  //   'single_use' => TRUE,
  //   'whole_value' => 'after',
  //   'where' => "n.created >= ?",
  //   'tags' => 'd',    
  //   '#type' => 'date',
  //   '#element_validate' => array('date_validate', '_cmf_heart_bottom_link_date_validate'),
  //   '#submit' => array('cmf_heart_bottom_link_date_handler'),
  //   '#default_value' => array('year' => date('Y'), 'month' => 1, 'day' => 1),
  //   '#prefix' => '<div class="date-inline">',
  //   '#suffix' => '</div>',
  //   );

  // $filters['created_before'] = array(
  //   'title' => t('该时间之前'),
  //   'single_use' => TRUE,
  //   'whole_value' => 'after',
  //   'where' => "n.created <= ?",
  //   'tags' => 'd',    
  //   '#type' => 'date',
  //   '#element_validate' => array('date_validate', '_cmf_heart_bottom_link_date_validate'),
  //   '#submit' => array('cmf_heart_bottom_link_date_handler'),
  //   '#default_value' => array('year' => date('Y'), 'month' => 12, 'day' => 31),
  //   '#prefix' => '<div class="date-inline">',
  //   '#suffix' => '</div>',
  //   );

  // Don't show these on a user page.
    // $filters['users'] = array(
    //   'title' => t('添加人'),
    //   'single_use' => TRUE,
    //   'whole_value' => 'before',
    //   'disable' => array('user', 'role', 'blocked'),
    //   'where' => "u.name = ?",
    //   'tags' => 's',    
    //   '#type' => 'textfield',
    //   '#submit' => array('cmf_heart_bottom_link_users_handler'),
    //   '#autocomplete_path' => 'cmf/userauto',
    //   );

    // $filters['role'] = array(
    //   'title' => t('用户角色'),
    //   'single_use' => TRUE,
    //   'whole_value' => 'before',
    //   'where' => "u.uid = ur.uid AND ur.rid = ?",
    //   'tags' => 'd',    
    //   'join' => "INNER JOIN {users_roles} ur ON u.uid = ur.uid",
    //   '#type' => 'select',
    //   '#options' => cmf_heart_bottom_link_get_roles('names'),
    //   '#access' => false
    // );

  // The taxonomy filter.
  $taxarr = _cmf_heart_bottom_link_getTax(array_filter(variable_get('cmf_base_heart_bl'))); 
  if (module_exists('taxonomy') && is_array(variable_get('cmf_base_heart_bl')) && (count($taxarr)>1)) {
    $filters['category'] = array(
      'title' => t('类别'),
      'single_use' => TRUE,
      'tags' => 'd',  
      'whole_value' => 'before',
      'query_build' => '_cmf_heart_bottom_link_category_query_build',
      '#type' => 'select',
      '#attributes' =>array('lang'=>'selectt_1'),
      '#options' => $taxarr,
      '#prefix' => '<div id="taxdiv" style="position:relative;">',
      '#suffix' => '</div>'  
      );
    
    $filters['categoryhide'] = array(
        'title' => t('categoryhide'),
        '#type' => 'hidden',
        '#attributes' =>array('id'=>'categoryhide'),
        '#default_value' => -1,
        '#prefix' => '<div id="categoryhd">',
        '#suffix' => '</div>'
    );
  }

  drupal_alter('cmf_heart_bottom_link_filters', $filters);
  return $filters;
}

/**
 * Called when user goes to example.com/admin/content/filter
 *
 * @return the HTML generated from the $form data structure
 */
function cmf_heart_bottom_link_admin_content_page() { 
  if (!isset($_SESSION['cmf_heart_bottom_link_show_nid'])) {
    $_SESSION['cmf_heart_bottom_link_show_nid'] = 1;
  } 
  $output = '';
  $cff = drupal_get_form('cmf_heart_bottom_link_filter_form'); 
  $output = drupal_render($cff); 
  // Call the form first, to allow for the form_val es array to be populated.
  if (isset($_POST['operation']) && $_POST['operation'] == 'delete' && $_POST['nodes']) {
    module_load_include('inc', 'node', 'node.admin');
    return drupal_get_form('node_multiple_delete_confirm', $_POST['nodes']);
  }
  else {  
    $canf = drupal_get_form('cmf_heart_bottom_link_admin_nodes_form');     
    $output .= drupal_render($canf);
  }
  drupal_add_js(drupal_get_path('module', 'cmf_heart_bottom_link').'/cmf_heart_bottom_link.page.js'); 
  return $output.'<input type="hidden" id="basepath" value="'.base_path().'">';
}


/**
 * FILTERS
 */
/**
 * Defines the form for content administration filters.
 *
 * @ingroup forms
 *
 * @param (optional) true if the filter to be built serves the user profile page
 * @return array with forms properties
 */
function cmf_heart_bottom_link_filter_form($form, &$form_state) {  
  //调用提示信息  
  $session = &$_SESSION['cmf_heart_bottom_link_overview_filter'];
  $session = is_array($session) ? $session : array();
  $filters = cmf_heart_bottom_link_filters();
  drupal_add_css(drupal_get_path('module', 'cmf_heart_bottom_link') .'/cmf_heart_bottom_link.css');
  drupal_add_js(drupal_get_path('module', 'cmf_heart_bottom_link') .'/cmf_heart_bottom_link.jquery.js');
  
  // General settings display (max rows & content kind).
  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('基本设置'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    );

  $form['general']['show_nid'] = array(
    '#type' => 'radios',
    // '#type' => 'hidden',
    '#title' => t('内容id'),
    '#options' => array(0 => t('不显示'), 1 => t('显示')),
    '#default_value' => isset($_SESSION['cmf_heart_bottom_link_show_nid']) ? $_SESSION['cmf_heart_bottom_link_show_nid'] : 0,
    '#prefix' => '<div class="container-inline"><div class="cmf_heart_bottom_link-radios">',
    '#suffix' => '</div></div><div class="clear-block"></div>',
    );

  $form['general']['buttons']['apply'] = array(
    '#type' => 'submit',
    '#value' => t('设置'),
    '#submit' => array('cmf_heart_bottom_link_filter_form_apply'),
    '#suffix' => '</div>',
    );
// return $form;
  $i = 0;
  $form['filters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Show only items where'),
//    '#theme' => 'node_filters',
    ); 
 
  
  //start print notice message
  foreach ($session as $filter) {
    list($type, $value) = $filter;
    // Special handling by type of filter.
    switch ($type) {
      case 'category':
        // Load term name from DB rather than search and parse options array.
        $value = taxonomy_term_load($value);
        $value = isset($value->name) ? $value->name : '';
        break;

      case 'body_contains':
      case 'title':
        // Add quotes.
        $value = "'". $value ."'";
        break;

      case 'created_after':
      case 'created_before':
        // Format as human date.
        $fmt = variable_get('date_format_short', variable_get('date_format_short_custom', 'Y M j'));
        $fmt = trim(str_replace(array('H', 'i', ':'), '', $fmt));
        $value = format_date($value, 'custom', $fmt);
        break;

      default:
        if (isset($filters[$type]['#options'])) {
          $value = $filters[$type]['#options'][$value];
        }
    }

    // Add applicable filter verbiage. Note '@' and '%' do check_plain.
    $trans_strings = array(
      '%filter_name' => $filters[$type]['title'],
      '%filter_value' => $value,
      );
    if ($i++) {
      $and = '<br><em>'. t('并且') .'</em> ';
    }
    else {
      $and = NULL;
    }
    
    //after  before 是指的is 是在前还是在后
    switch ($filters[$type]['whole_value']) {
      case 'after':
        $form['filters']['current'][] = array('#type'=>'markup', '#markup' => $and . t('是 %filter_name %filter_value', $trans_strings));
        break;

      case 'before':
        $form['filters']['current'][] = array('#type'=>'markup', '#markup' => $and . t('%filter_name 等于 %filter_value', $trans_strings));
        break;

      case 'no':
        $form['filters']['current'][] = array('#type'=>'markup', '#markup' => $and . t('%filter_name 包含 %filter_value', $trans_strings));
        break;
    }

    // Remove mutually exclusive filters.
    if (isset($filters[$type]['disable'])) {
      foreach ($filters[$type]['disable'] as $exclude) {
        unset($filters[$exclude]);
      }
    }

    // Remove the single use option if it is already being filtered on.
    if ($type == 'status') {
      // Strip current value, then unset both values.
      $status = drupal_substr($filter[1], 0, -1);
      unset ($filters['status']['#options'][$status.'0'], $filters['status']['#options'][$status.'1']);
    }

    //如果已经被查询了，那么就删除
    if (isset($filters[$type]['single_use'])) {
      unset($filters[$type]);
    }
  }
  //end print notice message


  // Prepare form fields for filters.
  $sids = '';
  $names = array();
  foreach ($filters as $key => $filter) {
     if($filter['#type']!='hidden'){  
        $names[$key] = $filter['title'];
        $sids .= '#edit-'.str_replace('_','-',$key).',';
     }  
      // Normal form field handling.
      $form['filters']['status'][$key] = array();
      foreach ($filter as $element => $value) { 
        // If the filter element name begins with '#' then it is for the form.
        if (drupal_substr($element, 0, 1) == '#') {  
          $form['filters']['status'][$key][$element] = $value;
        }
      }  
  } 
  $sids = substr($sids,0,strlen($sids)-1);
  //add js event
  drupal_add_js(array('data'=>array('cmf_heart_bottom_link'=>array('clickid'=>$sids))),'setting');

  // Building radio buttons.
  $form['filters']['filter'] = array(
    '#type'          => 'checkboxes',
    '#options'       => $names, 
    '#default_value' => array(),
    '#attributes' => array('class' => array('multiselect')),
  );

  // Building buttons depending on the filter state.
  $form['filters']['buttons']['submit'] = array(
    '#type'  => 'submit',
    '#value' => (count($session) ? t('Refine') : t('Filter')),
    '#submit' => array('cmf_heart_bottom_link_filter_form_refine'),
    );

  if (count($session)) {
    $form['filters']['buttons']['undo'] = array(
      '#type' => 'submit',
      '#submit' => array('cmf_heart_bottom_link_filter_form_undo'),
      '#value' => t('Undo'),
    );
    $form['filters']['buttons']['reset'] = array(
      '#type' => 'submit',
      '#submit' => array('cmf_heart_bottom_link_filter_form_reset'),
      '#value' => t('Reset'),
    );
  }  
  return $form;
}

/**
 * Handle post-validation form submission.
 *
 * @ingroup forms
 *
 * @param the ID of the passed form
 * @param array with the form properties values
 */
function cmf_heart_bottom_link_filter_form_refine($form, &$form_state) {
  $filters = cmf_heart_bottom_link_filters();
  if (isset($form_state['values']['filter'])) {
    $filterarr = $form_state['values']['filter'];
    // Convert AJAX search value to select box value.

    foreach (array_filter($filterarr) as $filter) {
      // If a filter has specified a submit function, call it. (Only allow one value.)
      if (isset($filters[$filter]['#submit'])) {
        $form_state['values'][$filter] = call_user_func($filters[$filter]['#submit'][0], $form, $form_state,$filter);
      }
      // Repeating this allows submit handlers (e.g. users) to alter the filter name.
      // $filter = $form_state['values']['filter'];

      // Flatten the options array to accommodate hierarchical/nested options.
      // If there are no options, fake it.
      if (isset($filters[$filter]['#options'])) {
        $flat_options = form_options_flatten($filters[$filter]['#options']);
      }
      else {
        $flat_options = array($form_state['values'][$filter] => 1);
      }
      // If the option is selected or there are no options, set the session value.
      if (isset($flat_options[$form_state['values'][$filter]])) {
        //如果为过滤条件那么选取隐藏值做为查询值

        if($filter=='category'){
          $_SESSION['cmf_heart_bottom_link_overview_filter'][] = array($filter, $form_state['values']['categoryhide']);
        }else{
          $_SESSION['cmf_heart_bottom_link_overview_filter'][] = array($filter, $form_state['values'][$filter]);
        }
      } 
    }
  }
}

/**
 * Submit handler for 'Undo' button.
 */
function cmf_heart_bottom_link_filter_form_undo($form, &$form_state) {
  array_pop($_SESSION['cmf_heart_bottom_link_overview_filter']);
}

/**
 * Submit handler for 'Reset' button.
 */
function cmf_heart_bottom_link_filter_form_reset($form, &$form_state) {
  $_SESSION['cmf_heart_bottom_link_overview_filter'] = array();
}

/**
 * Submit handler for 'Apply' button.
 */
function cmf_heart_bottom_link_filter_form_apply($form, &$form_state) {
  $_SESSION['cmf_heart_bottom_link_show_nid'] = $form_state['values']['show_nid'];
  $form_state['redirect'] = 'admin/content/filter/cmf_hbl';
}

function _cmf_heart_bottom_link_valid_user($user) {
  if (!empty($user->uid)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Validation handler for filter doing "contains".
 */
function _cmf_heart_bottom_link_contains_validate($form) {
  // Make sure this was triggered by the selected filter.
  if ($form['#name'] == @$form['#post']['filter']) {
    // Strip blanks to see if the field is empty.
    $value = trim($form['#value']);
    if (empty($value)) {
      form_error($form, t('%name text value may not be empty.', array('%name' => $form['#name'])));
    }
  }
}

/**
 * Validation handler for filter doing "dates".
 */
function _cmf_heart_bottom_link_date_validate($form) {  
  // Make sure this was triggered by the selected filter.
  if ($form['#name'] != @$form['#post']['filter']) {
    return;
  }

  // Determine correct time values depending on the filter name.
  if (strpos($form['#name'], 'before') === FALSE) {
    $entered_date = mktime(0, 0, 0, (int)$form['#value']['month'], (int)$form['#value']['day'], (int)$form['#value']['year'], 1);
  }
  else {
    $entered_date = mktime(11, 59, 59, (int)$form['#value']['month'], (int)$form['#value']['day'], (int)$form['#value']['year'], 1);
  }

// drupal_set_message('_cmf_heart_bottom_link_date_validate, filter='.$form['#post']['filter'].', name='.$form['#name'].' '.print_r($form['#value'], true).', calc='.format_date($entered_date));
// drupal_set_message('current filters='.print_r($_SESSION['cmf_heart_bottom_link_overview_filter'], true));

  if (empty($entered_date)) {
    form_error($form, t('%name date value may not be empty.', array('%name' => $form['#name'])));
  }
}

/**
 * Submit handler for 'users' filter.
 * Ignore the Coder flag - it is a false positive.
 */
function cmf_heart_bottom_link_users_handler($form, &$form_state, $filterprefix='') {
  $name = $form_state['values']['users']; 
  // Get uid to put in 'user' filter value.
  $form_state['values']['user'] = db_query('SELECT uid FROM {users} WHERE name = ?', array($name))->fetchField();
  // Switch filter type to user.
  // $form_state['values']['filter'] = 'user';
  return $name;
}

/**
 * Submit handler for date filters.
 * Ignore the Coder flag - it is a false positive.
 */
function cmf_heart_bottom_link_date_handler($form, &$form_state, $filterprefix='') {
  return gmmktime(0, 0, 0, $form_state['values'][$filterprefix]['month'], $form_state['values'][$filterprefix]['day'], $form_state['values'][$filterprefix]['year']);
}

/**
 * Theme cmf_heart_bottom_link administration filter form.
 *
 * @themable
 */
function theme_cmf_heart_bottom_link_filter_form($form) { 
  $form['form']['filters']['status']['status']['#id'] = 'edit-status';
  return '<div id="cmf_heart_bottom_link_header">'. drupal_render($form['form']['general']) .'</div><div id="headerafter"></div>'
    .'<div id="main-filters"><div id="node-admin-filter-filter">'.render($form['form']['filters']['filter']) .'</div>'
    .'<div id="node-admin-filter-status">'.render($form['form']['filters']['status']) .'</div></div>'      
    .'<div id="node-admin-filter-result">'.drupal_render_children($form['form']).'</div><div class="clearfix"></div>'; 
}

/**
 *  QUERIES
 */
/**
 * Build the variable parts of the query to be performed regarding the filter status.
 *
 * @return associative array with WHERE JOIN query parts and respective arguments
 */
function cmf_heart_bottom_link_build_filter_query() { 
  //获取查询条件的结构，包括，每个条件的查询条件，和验证函数的定义  
  $filters = cmf_heart_bottom_link_filters();

  // Build query
  $where = $args = array();
  $join = '';
  foreach ($_SESSION['cmf_heart_bottom_link_overview_filter'] as $index => $filter) { 
    list($key, $value) = $filter;
    // Does the filter have query_build function?
    if (isset($filters[$key]['query_build'])) {
      $result = call_user_func($filters[$key]['query_build'], $key, $value, $index);
      if (isset($result['where'])) {
        $where[] = $result['where'];
      }
      if (isset($result['join'])) {
        $join .= $result['join'] .' ';
      }
      if (isset($result['value'])) {
        $value = $result['value'];
      }
    } else if(isset($filters[$key]['query_type_or'])){
      $result = call_user_func($filters[$key]['query_type_or'], $key, $value, $index);
      if (isset($result['where'])) {
        $where[] = $result['where'];
      }
      if (isset($result['value'])) {
        $value = $result['value'];
      }
    }
    else {
      // Does the filter have where and/or joins specified?
      if (isset($filters[$key]['where'])) {
        $where[] = $filters[$key]['where'];
      }
      if (isset($filters[$key]['join'])) {
        $join .= $filters[$key]['join'] .' ';
      }
    }
    //$tags = is_array($value) ? key($value) : $filters[$key]['tags']; 
    if($filters[$key]['tags']=='d'){
        $value = (int)$value;
    }else if($filters[$key]['tags']=='s'){
        $value = (string)$value;
    }else if($filters[$key]['tags']=='like'){
        $value = (string)"%".$value."%";
    }
    if(is_array($value)){
      foreach ($value as $key => $v) {
        $args[] = $v;
      }
    }else{
      $args[] = $value;
    }
    
  } 
  $where = count($where) ? 'WHERE '. implode(' AND ', $where) : ''; 
  return array('where' => $where, 'join' => $join, 'args' => $args);
}

/**
 * Query_build function for category field.
 */
function _cmf_heart_bottom_link_category_query_build($key, $value, $index) {
  $table = "tn$index";
  return array(
    'where' => "$table.tid = ?",
    'join' => "INNER JOIN {taxonomy_index} $table ON n.nid = $table.nid ",
    'value' => $value,  
    );
}

/**
 * Query_build function for status field.
 */
function _cmf_heart_bottom_link_status_query_build($key, $value, $index) {
  // Note: no exploitable hole as $key/$value have already been checked when submitted.
  list($key, $value) = explode('-', $value, 2);
  if ($key == 'sticky') {
    // This allows sticky-encoded weighting (like Weight module) to also work.
    return array(
      'where' => "n.". $key .' '. ($value == 1 ? '>' : '<') ." ?",
        'value' => $value,
      );
  }
  else {
    return array(
      'where' => "n.". $key ." = ?",
        'value' => $value,
      );
  }
}

/**
 * Build the header of the result table.
 * @return array respecting tablesort_sql()
 */
function cmf_heart_bottom_link_build_header() {

  $header = array();
  if ($_SESSION['cmf_heart_bottom_link_show_nid']) {
    $header[] = array('data' => t('ID'));
  }

  $header[] = array('data' => t('标题'));

  $header[] = array('data' => t('链接类型'));
  $header[] = array('data' => t('状态'));
  $header[] = array('data' => t('上传者'));
  $header[] = array('data' => t('上传时间'));

  if (user_access('filter and manage site content')) {
    $header[] = array('data' => t('操作'));
  }
  $header[] = array('data' => t('排序'),'field' => 'weight', 'sort' => 'asc');

  //add table select all
  if (user_access('use_cmf_heart_bottom_link_operation')) { 
    drupal_add_js('misc/tableselect.js');
    array_unshift($header, array('class' => array('select-all')));
  }
  return $header;
}

/**
 * Perform adjusted query.
 * @param array respecting tablesort_sql()
 * @return result of permormed query
 */
function cmf_heart_bottom_link_perform_query($header, $kind = NULL) {  
  // unset($_SESSION['cmf_heart_bottom_link_overview_filter']);
  //获取参数 where join args   
  $filter = cmf_heart_bottom_link_build_filter_query();
  $where = ' '. $filter['where'];
  //添加自定义where条件
  //如果查询的内容为空，或者没有选择内容类型作为过滤条件，则制定某些内容类型进行过滤
  if($where==' ' || !_check_have_type_for_filter(array('type','type_one'))){ 
    $content_type = _cmf_heart_bottom_link_get_access_content_type();
    $content_type = _return_true_content_type($content_type);
    $condition = _generation_where_value($content_type);
    if($where==' '){
      $where = 'where '.$condition['where'];
      $filter['args'] = array_keys($condition['value']); 
    }else{
      $where = $where.' AND '.$condition['where'];
      $filter['args'] = array_merge($filter['args'],array_keys($condition['value'])); 
    }
  }  

$cwhere = str_replace(array('n.title', 'n.uid', 'r.body'), array('c.subject', 'c.uid', 'c.comment'), $where);
  $query = "SELECT n.nid, n.title, n.type, n.status, n.created, "
    ."n.changed, n.promote, n.sticky, n.tnid, "      
    ."u.name AS username, u.uid, r.body_value body, "
    ."ty.field_title_type_tid as title_type, "      
    ."ctype.field_message_type_tid as ctype_tid, "      
    ."weight.field_weight_value as weight "      
    ."FROM {node} n "
    ."LEFT JOIN {field_data_body} r ON r.entity_id = n.nid "
    ."LEFT JOIN {field_data_field_title_type} ty ON ty.entity_id = n.nid "
    ."LEFT JOIN {field_data_field_message_type} ctype ON ctype.entity_id = n.nid "
    ."LEFT JOIN {field_data_field_weight} weight ON weight.entity_id = n.nid "
    ."INNER JOIN {users} u ON n.uid = u.uid "
    . $filter['join']
    . $where
    . tablesort_sql($header);
    $result = db_query($query, $filter['args']);

    return $result;
}

/*
 *  AUX
 */
/**
 * Builds a list of available users.
 *
 * @param the format in which to return the list
 * @return array of all available users
 */
function cmf_heart_bottom_link_get_users($op) {
  switch ($op) {
    case 'names': 
      $result = db_query('SELECT uid, name FROM {users} WHERE uid <> 0 ORDER BY name');
      break;
  }

  $users = array();
 if(is_object($result)){
   while ($account = $result->fetchObject()) {     
       $users[$account->uid] = $account->name;
   }
 }

  return $users;
}

/**
 * Menu callback; Retrieve a JSON object containing autocomplete suggestions for existing users.
 */
function _cmf_heart_bottom_link_user_autocomplete($string = '') {
  $matches = array();
  if ($string) {
     $result = db_select('{users}', 'u');
     $result->condition('u.name', '%'.db_like($string).'%', 'like');
     $result->addField('u', 'name');
    $result = $result->execute();
    while ($account = $result->fetchObject()) {
      $matches[$account->name] = check_plain($account->name);
    }
  }
  drupal_json_output($matches);
}

/**
 * Builds a list of available roles
 *
 * @param the format in which to return the list
 * @return array of all available roles
 */
function cmf_heart_bottom_link_get_roles($op) {
  switch ($op) {
    case 'names':
      $result = db_query('SELECT rid, name FROM {role} ORDER BY name');
      break;
  }
  $roles = array();
  $cmf_heart_bottom_linksetrole = variable_get('cmf_heart_bottom_link_roles');
  if(empty($cmf_heart_bottom_linksetrole)){
    $cmf_heart_bottom_linksetrole = array();
  }else{
    $cmf_heart_bottom_linksetrole = variable_get('cmf_heart_bottom_link_roles');
  }
  while ($role = $result->fetchAssoc()) {     
    if(in_array($role['rid'], $cmf_heart_bottom_linksetrole)){
      $roles[$role['rid']] = $role['name'];
    }
  }
  return $roles;
}

/**
 * Get the html code of an image
 *
 * @param the pretended image
 * @return html tag img
 */
function _cmf_heart_bottom_link_get_img($action, $title) {
  $path =  base_path() . drupal_get_path('module', 'cmf_heart_bottom_link') .'/images/'. $action .'.png';
  if ($title == NULL) {
    $html = '<img src="'. $path .'" alt="untitled image" />';
  }
  else {
    $html = '<img src="'. $path .'" title="'. $title .'" alt="'. $title .'" />';
  }
  return $html;
}

/**
 * Theme (node) type cell on table result.
 *
 * @ingroup themable
 *
 * @param 0 or node type key
 * @return formated (node) type
 */
function theme_cmf_heart_bottom_link_type($type) { 
  return db_query("SELECT name FROM {node_type} WHERE type = ?",  array($type['type']))->fetchField();
}

/**
 * Implementation of hook_theme().
 *
 * @ingroup themable
 */
function cmf_heart_bottom_link_theme() {
  return array(
    'cmf_heart_bottom_link_filter_form' => array(
        'render element' => 'form',
      ),
    'cmf_heart_bottom_link_user' => array(
        'variables' => array('uid' => NULL),
      ),
    'cmf_heart_bottom_link_type' => array(
        'variables' => array('type' => NULL),
      ),
    'cmf_heart_bottom_link_admin_nodes_form' => array(
         'render element' => 'form',
         'file' => 'cmf_heart_bottom_link.inc',
      )
  );
}

/**
 * Theme user cell on table result.
 *
 * @ingroup themable
 *
 * @param user ID
 * @return clickable username with status
 */
function theme_cmf_heart_bottom_link_user($variables) {
  $uid = $variables['uid'];
  if ($uid == 0 || !isset($uid)) {
    return variable_get('anonymous', t('anonymous'));
  }
  $result = db_query('SELECT name, status FROM {users} WHERE uid = :d', array(':d'=>$uid));
  $user = $result->fetchAssoc();
  $url_alias = _cmf_heart_bottom_link_get_user_path($uid);

  $display = $user['status'] ? $user['name'] : _cmf_heart_bottom_link_get_img('blocked', t('blocked')) .' '. $user['name'];
  if (user_access('access user profiles')) {
    //$url = $url_alias ? $url_alias : 'user/'. $uid;
    //$output = l($display, $url, array('html' => TRUE));
    $output = $user['name'];
  }
  else {
    $output = $display;
  }
  return $output;
}

/**
 * Get the alias path to a user profile
 *
 * @param user ID
 * @return the relative URL of the user profile
 */
function _cmf_heart_bottom_link_get_user_path($uid) {
  return db_query("
    SELECT alias
    FROM {url_alias}
    WHERE source = '%s';",
    array('%s'=>'user/'. $uid)
  )->fetchField();
}

/**
 * Get the term for a forum node
 *
 * @param node ID
 * @return the name and forum description
 */
function _cmf_heart_bottom_link_get_forum($nid) {
  $path = array();
  $node = node_load($nid); 
  $parents = taxonomy_get_parents_all($node->tid);
  foreach ($parents as $parent) {
    $path[] = $parent->name;
  }
  return implode(' > ', array_reverse($path));
}

function cmf_heart_bottom_link_get_workflows() {
  if (!module_exists('workflow')) return;  
  if (!function_exists('workflow_load_all')) return;
  
  $workflows = workflow_load_all();
  
  $states = array();
  if (is_array($workflows)) {
    foreach ($workflows as $workflow) {
      if (is_array($workflow->states)) {
        foreach ($workflow->states as $state) {
          $states[$state->name] = $workflow->label . " : " . $state->label;
        }
      }
    }
  }
  return $states;
}

/**
  * administraster node operation
  */
function cmf_heart_bottom_link_admin_node_operations(){
  module_load_include('inc', 'node', 'node.admin');
  $options = array(); 
  foreach (module_invoke('node', 'node_operations') as $operation => $array) {
    $options[$operation] = $array['label'];
  }
  drupal_alter('cmf_heart_bottom_link_admin_node_operations',$options);
  return $options;
}

/**
 * [cmf_heart_bottom_link_cmf_heart_bottom_link_admin_node_operations_alter description]
 * @param  [type] $options [description]
 * @return [type]          [description]
 */
function cmf_heart_bottom_link_cmf_heart_bottom_link_admin_node_operations_alter(&$options){
  array_unshift($options, '==请选择==');
  if(user_access('use_cmf_heart_bottom_link_operation')){
    // $options['weight'] = '保存排序';
  }
  $options['unpublish'] = '批量删除';
  unset($options['publish']);
  unset($options['promote']);
  unset($options['demote']);
  unset($options['sticky']);
  unset($options['unsticky']);
  global $user;
  if(!array_key_exists(1,$user->roles)){
    unset($options['delete']);
  }
}

/**
 * Query_build function for workflow
 */
function _cmf_heart_bottom_link_workflow_query_build($key, $value, $index) {
  if (!module_exists('workflow')) return;  
  if (!function_exists('workflow_load_all')) return;

  $table = "workflow_node";
  return array(
    'where' => "$table.state_name = '%s'",
    'join' => "INNER JOIN {$table} $table ON n.nid = $table.nid ",
    'value' => $value,
    );
}


/**
 * Implementation of hook_form_alter().
 */
function cmf_heart_bottom_link_form_alter(&$form, $form_state, $form_id) {

  switch ($form_id) {

    // When CMF is only showing nodes or only showing comments, the deletion is handled by
    // re-using the multiple delete functions provided by node module and comment module.
    case 'node_multiple_delete_confirm':
    case 'comment_multiple_delete_confirm':
    case 'friendlink_node_form':
      // The target page after deleting is set in the corresponding submit function so we need
      // to add another submit function which will be executed after that one, to change the
      // redirect value to our page.
      $form['actions']['submit']['#submit'][]= '_cmf_heart_bottom_link_redirect_to_cmf_heart_bottom_link';

      // The cancel link will have been defined to return to admin/content/node (or admin/content/comment)
      // so we need to change it here to return to admin/content/filter instead.
      $form['actions']['cancel']['#value'] = l(t('Cancel'), 'admin/content/filter/cmf_hbl');

      if($form_id=='friendlink_node_form' && $GLOBALS['user']->uid!=1){
        $form['actions']['preview']['#access'] = false;
        $form['actions']['cancel']['#access'] = false;
        $form['actions']['delete']['#access'] = false;
        $form['field_weight']['und'][0]['value']['#access'] = false;
      }      
      break;
    default:
  }
}

/**
 * Additional node deletion 'submit' function.
 */
function _cmf_heart_bottom_link_redirect_to_cmf_heart_bottom_link($form, &$form_state) {
  // Set the final destination after deleting node(s) or comments(s).
  // Could have used a GOTO here, but safer to set redirect.
  $form_state['redirect'] = 'admin/content/filter/cmf_hbl';
}

/**
 * [cmf_heart_bottom_link_menu_local_tasks_alter description]
 * @param  [type] $data        [description]
 * @param  [type] $router_item [description]
 * @param  [type] $root_path   [description]
 * @return [type]              [description]
 */
function cmf_heart_bottom_link_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $currentpath = current_path();
  if ($currentpath == 'admin/content/filter/cmf_hbl'){
    $item = menu_get_item('node/add/friendlink');
    if ($item['access']) {
      $item['title'] = '添加底部链接';
      $data['actions']['output']['addfriendlink'] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }else{
    if(isset($data['actions']['output']['addfriendlink'])) unset($data['actions']['output']['addfriendlink']);
  }
}